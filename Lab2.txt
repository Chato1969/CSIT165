---
title: "$Lab$ $2$"
author: "$Wesley$ $Newcomb$"
date: "$February$ $22$, $2023$"
output:
  html_document: default
  word_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Part 1: Introduction to modeling using basic R syntax
```{r puppies, echo=FALSE, eval=TRUE}
# Congratulations, you have puppy fever! As someone who is inflicted with puppy fever, you would like to buy as many puppies as you perceivably can. To help you determine if you can afford all of the puppies you want or to determine how many puppies you can afford, you opt to use R to help you. In this exercise, please print the contents of each variable after you declare it.

# Create a variable puppies equal to the number of puppies you’d like to have.
# Create a variable puppy_price, which is how much you think a puppy costs.
# Create a variable total_cost that has the total cost of all of your puppies.
# Create a boolean variable too_expensive, set to TRUE if the cost is greater than $1,000.
# Create a variable max_puppies, which is the number of puppies you can afford for $1,000.

# Create a variable puppies equal to the number of puppies you'd like to have
puppies <- 10

# Create a variable puppy price, which is how much you think a puppy costs
puppy_price <- 500

# Create a variable total cost that has the total cost of all of your puppies
total_cost <- puppies * puppy_price

# Create a boolean variable too expensive, set to TRUE it the cost is greater than $1,000
too_expensive <- total_cost > 1000

# Create a variable max puppies which is the number of puppies you can afford for $1,000
max_puppies <- 1000 / puppy_price

# Print the contents of each variable
print(puppies)
print(puppy_price)
print(total_cost)
print(too_expensive)
print(max_puppies)
```

## Part 2: Manipulating variables and learning how to use new functions
```{r favorite, echo=FALSE, eval=TRUE}
# You work as a data analyst for a new company and are asked to create id tags for everyone at work. Your goal is to make it informative as well as personal to help facilitate collaboration in the work place. To do this, you first want to gather information about each employee.

# Assign your name to the variable my_name in four different ways.
# Assign your height (in inches) to a variable my_height.
# Assign your favorite day to a variable favorite_day as a date object.
# Assign your favorite quote to a variable favorite_quote. How many characters does your favorite quote have? That have many character.

# Show what type of objects my_name, my_height, favorite_day, and favorite_quote are.
# Coerce these variables to numerics and describe what happens.
# Create a vector variable named id that contains my_name, my_height, favorite_day, and favorite_quote.

# What class is id? Solutions: Nested class. The class ID is stored as an attribute (as are names, dimensions and some other stuff), but usually you don't need to worry about such internals, since R offers accessory functions.

# Did the classes for my_name, my_height, favorite_day, and favorite_quote change when they were stored in id? Solutions: Four different method to solutions name, height, day, and quote information however some NA too.

# Did the classes change for the variables themselves? Solutions: Yes; but the change will be on it's own view it won't change the class variable as seen by the class or any other object. Referred explicitly the class variable will be changed as you can imagine.

# Your employer wants you to be able to print each employee’s id while displaying each variable of information line by line. As a beginner with R, however, you are unfamiliar with how to do this so your employer gives you a hint to use the functions cat and paste.

# Try using cat and paste with id as a function argument. How do the results differ? What happens when we use cat and paste at the same time (i.e. f(g(x)))? What happens if we change the order we use them (i.e. g(f(x)))? Two answer had opposite switch method way, give different method to solutions. The (i.e. f(g(x))) have no character 0 available, and (i.e. g(f(x))) have only many character 0 available too some.

# How would you determine the difference between cat and paste using R documentation (from within RStudio)? Load unless data.RData file have power control that.

# What is a great internet resource to use as discussed in the book? Yes, I led to read get knowledge add then add skill more.

# What do sep and collapse arguments for paste do? If we wanted to append each character variable in our vector id with a new line (i.e. "\n") would we use sep or collapse? That endline next as return by sentence to end turn to another line next. Call "charactor 0" that available character solutions.

# Display the contents of id using a combination of cat and paste with the appropriate arguments for paste.

# Assign your name to the variable my name in four different ways
my_name1 <- "John"
my_name2 <- "Jane"
my_name3 <- "Jim"
my_name4 <- "Jill"

# Assign your height (in inches) to a variable my height
my_height1 <- 72
my_height2 <- 60
my_height3 <- 80
my_height4 <- 55

# Assign your favorite quote to a variable favorite day as a date object
favorite_day1 <- as.Date("2023-02-13")
favorite_day2 <- as.Date("2023-02-13")
favorite_day3 <- as.Date("2023-02-13")
favorite_day4 <- as.Date("2023-02-13")

# Assign your favorite quote to a variable favorite quote
favorite_quote1 <- "Standard, work hard, play hard."
favorite_quote2 <- "Tall woman work hard, play hard."
favorite_quote3 <- "Extreme tallest male work hard, play hard."
favorite_quote4 <- "Dwalf woman Work hard, play hard."

# How many characters does your favorite quote have?
num_chars1 <- nchar(favorite_quote1)
num_chars2 <- nchar(favorite_quote2)
num_chars3 <- nchar(favorite_quote3)
num_chars4 <- nchar(favorite_quote4)

# Show what type of objects my name, my height, favorite day, and favorite quote are
print(class(my_name1))
print(class(my_height1))
print(class(favorite_day1))
print(class(favorite_quote1))
print(class(my_name2))
print(class(my_height2))
print(class(favorite_day2))
print(class(favorite_quote2))
print(class(my_name3))
print(class(my_height3))
print(class(favorite_day3))
print(class(favorite_quote3))
print(class(my_name4))
print(class(my_height4))
print(class(favorite_day4))
print(class(favorite_quote4))

# Coerce these variables to numerices and describe what happens
my_name1_numeric <- as.numeric(my_name1)
my_height1_character <- as.character(my_height1)
favorite_day1_numeric <- as.numeric(favorite_day1)
favorite_quote1_numeric <- as.numeric(favorite_quote1)
my_name2_numeric <- as.numeric(my_name2)
my_height2_character <- as.character(my_height2)
favorite_day2_numeric <- as.numeric(favorite_day2)
favorite_quote2_numeric <- as.numeric(favorite_quote2)
my_name3_numeric <- as.numeric(my_name3)
my_height3_character <- as.character(my_height3)
favorite_day3_numeric <- as.numeric(favorite_day3)
favorite_quote3_numeric <- as.numeric(favorite_quote3)
my_name4_numeric <- as.numeric(my_name4)
my_height4_character <- as.character(my_height4)
favorite_day4_numeric <- as.numeric(favorite_day4)
favorite_quote4_numeric <- as.numeric(favorite_quote4)
print(my_name1_numeric)
print(my_height1_character)
print(favorite_day1_numeric)
print(favorite_quote1_numeric)
print(my_name2_numeric)
print(my_height2_character)
print(favorite_day2_numeric)
print(favorite_quote2_numeric)
print(my_name3_numeric)
print(my_height3_character)
print(favorite_day3_numeric)
print(favorite_quote3_numeric)
print(my_name4_numeric)
print(my_height4_character)
print(favorite_day4_numeric)
print(favorite_quote4_numeric)

# Create a vector variable named id that contains my name, my height, favorite day, and favorite quote

id1 <- c(my_name1, my_height1, favorite_day1, favorite_quote1)
id2 <- c(my_name2, my_height2, favorite_day2, favorite_quote2)
id3 <- c(my_name3, my_height3, favorite_day3, favorite_quote3)
id4 <- c(my_name4, my_height4, favorite_day4, favorite_quote4)

# What class is id? Did the classes for my name, my height, favorite day, and favorite quote change when they were stored in id? Did the classes change for the variables themselves?
print(class(id1))
print(class(my_name1))
print(class(my_height1))
print(class(favorite_day1))
print(class(favorite_quote1))
print(class(id2))
print(class(my_name2))
print(class(my_height2))
print(class(favorite_day2))
print(class(favorite_quote2))
print(class(id3))
print(class(my_name3))
print(class(my_height3))
print(class(favorite_day3))
print(class(favorite_quote3))
print(class(id4))
print(class(my_name4))
print(class(my_height4))
print(class(favorite_day4))
print(class(favorite_quote4))

# Using cat and paste with id as a function argument

cat(paste(id1, collapse = " "))
cat(paste(id1, sep = " "))
cat(paste(id1, collapse = " "), paste(id1, sep = " "))
cat(paste(id2, collapse = " "))
cat(paste(id2, sep = " "))
cat(paste(id2, collapse = " "), paste(id2, sep = " "))
cat(paste(id3, collapse = " "))
cat(paste(id3, sep = " "))
cat(paste(id3, collapse = " "), paste(id3, sep = " "))
cat(paste(id4, collapse = " "))
cat(paste(id4, sep = " "))
cat(paste(id4, collapse = " "), paste(id4, sep = " "))

# Determining the difference between cat and dog

paste(cat(id1, collapse = " "))
paste(cat(id1, sep = " "))
paste(cat(id1, collapse = " "), cat(id1, sep = " \n"))
paste(cat(id2, collapse = " "))
paste(cat(id2, sep = " "))
paste(cat(id2, collapse = " "), cat(id2, sep = " \n"))
paste(cat(id3, collapse = " "))
paste(cat(id3, sep = " "))
paste(cat(id3, collapse = " "), cat(id3, sep = " \n"))
paste(cat(id4, collapse = " "))
paste(cat(id4, sep = " "))
paste(cat(id4, collapse = " "), cat(id4, sep = " \n"))

```

### Part 3: Accessing data in GitHub and mastering order of operations

```{r data.RData, echo=FALSE, eval=TRUE}
# Your employer asks you to solve for x using the quadratic equation:
# x = (-b +- sqrt(b^2 - 4*a*c)) / (2*a)
# The values for a, b, and c are the min, max, and mean respectively of a data set that your employer has on GitHub.
# In module 3, you were required to fork this repository to your GitHub and then clone it to your machine. To access the data set for determining a, b, and c we need to pull from the original repository onto our machine using GitHub. Before you can sync your fork with an upstream repository, however, you must configure a remote that points to the upstream repository. See LINK for help. After syncing, please click on data.RData in Module-4 to load the data set into your environment. Alternatively (and preferred), please use load followed by a character argument of the directory path to load the data set into your environment.
#Please calculate a (using min), b (using max), and c (using mean) from data. Pay careful attention to follow order of operations (PEMDAS)
# Use a, b, and c to solve for x using the quadratic equation. You will need to do this for + and - in the quadratic equation (i.e. you should have TWO answers). Please display the answer as x = {x1, x2} using cat and paste. In part 2 we used paste to display the contents of a vector, here we use it to concatenate different variables into one expression.

# Load data.RData
load("data.RData")

# Calculate a, b, and c
a <- min(data) # a is minimum in data
b <- max(data) # b is maximum in data
c <- mean(data) # c is mean in data

# Calculate x using the quadratic equation
x1 <- (-b + sqrt(b^2 - 4*a*c)) / (2*a)
x2 <- (-b - sqrt(b^2 - 4*a*c)) / (2*a)

cat(paste("x = {", x1, ",", x2, "}\n")) # Original and popular!
cat(paste("x = {", x2, ",", x1, "}\n")) # Switch x1x2 to x2x1
paste(cat("x = {", x1, ",", x2, "}\n")) # Round look nice but add character 0 ugly
paste(cat("x = {", x2, ",", x1, "}\n")) # Again switch and round look nice but add character 0 ugly.

```

```{r date, echo=FALSE, eval=TRUE}
# Test for date
section <- 165
date <- Sys.Date()
cat(paste("We are taking CSIT_", section, "and today is", date, "!\n")) # Popular
paste(cat("We are taking CSIT_", section, "and today is", date, "!\n")) # Ugly - add character 0
time(date) # check numeric, coercion, and character.

## We are taking CSIT_ 165 and today is 2022-01-17 !
```